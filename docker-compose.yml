version: '3.8'

services:
  backend:
    # コンテナ名をbackendに設定
    container_name: backend
    # バックエンドコードをマウント
    volumes:
      - ./backend:/app
    build:
       # ビルドコンテキストはカレントディレクトリ
      context: .
      dockerfile: docker/python/Dockerfile
    ports:
      - 8080:8080

  frontend:
    # コンテナ名をfrontendに設定
    container_name: frontend
    build:
      # ビルドコンテキストはカレントディレクトリ
      context: .
      dockerfile: docker/nodejs/Dockerfile
    volumes:
      - ./frontend:/src # ローカルをコンテナにマウント
      - /src/node_modules # node_modulesを共有せずコンテナ内で管理
    command: sh -c "cd src && npm run dev" #コンテナを立ち上げたときに自動的にbuildする
    ports:
      - "3000:3000"
    environment:
      - CHOKIDAR_USEPOLLING=true # ファイル監視を有効化
    
  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf

  db:
    container_name: MySQL
    build: 
      context: .
      dockerfile: docker/database/Dockerfile
    # DBのボリュームを指定
    # ローカルの/data/dbをコンテナの/var/lib/mysqlにマウントする
    volumes:
      - mysql_data:/var/lib/mysql
    # コンテナ内の環境変数を設定
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=app
      - MYSQL_USER=user
      - MYSQL_PASSWORD=password
    # DBのコンテナのヘルスチェックを行う
    # mysqladmin(MySQLサーバーの管理を行うクライアントを使ってDBコンテナ自身(127.0.0.1)にpingを送ってヘルスチェックを行う
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h 127.0.0.1 -u$MYSQL_USER -p$MYSQL_PASSWORD"]
      # ヘルスチェックのインターバルは10秒
      interval: 10s
      # タイムアウト時間は10秒
      timeout: 10s
      # リトライ回数は3回
      retries: 3
      # ヘルスチェックが失敗しても無視する時間は30秒
      start_period: 30s

volumes:
  mysql_data: